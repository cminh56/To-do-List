@model List<Web_Notebook.Models.Note.Note>
<meta charset="UTF-8">

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Note Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

    <style>
        /* Main Content Styles */
        body {
            font-family: Arial, sans-serif;
            display: flex;
            min-height: Auto;

        }

        .main-content {
            width: 20%;
            flex-grow: 1;
            background-color: #ecf0f1;
            padding: 30px;
            height: auto; /* Adjust height to fit content */
            overflow: auto;
        }

        .note {
            background-color: #fcfae6;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
        }

            .note h3 {
                font-size: 20px;
                color: #2c3e50;
            }

            .note p {
                font-size: 16px;
                color: #34495e;
            }

            .note hr {
                border: 1px solid #ddd;
            }
        .task button {
            background-color: #16a085;
            color: white;
            border: none;
            padding: 8px 15px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 14px;
        }

            .task button:hover {
                background-color: #12876f;
            }

        /* Button Styles */
        .btn-primary {
            background-color: #2c3e50;
            color: white;
            padding: 8px 16px;
            border-radius: 5px;
            text-decoration: none;
            font-size: 14px;
            cursor: pointer;
        }

            .btn-primary:hover {
                background-color: #2c3e50;
            }

        .task-list {

            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 1);
        }
        /* Delete Button Styles */
        .task-list button.delete {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 8px 15px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 14px;
        }

            .task-list button.delete:hover {
                background-color: #c0392b;
            }
        .task-list-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

            .task-list-header h2 {
                font-size: 24px;
                margin: 0;
            }

        .note-footer {
            display: flex;
            justify-content: space-between; /* Space between elements */
            align-items: center; /* Vertically center the elements */
        }

            .note-footer p {
                margin: 0;
                font-size: 14px;
            }

            .note-footer button {
                background: none;
                border: none;
                cursor: pointer;
                padding: 5px 10px;
                font-size: 18px;
                display: inline-flex;
                align-items: center;
            }

                .note-footer button i {
                    margin-right: 5px; /* Space between icon and text */
                }

                .note-footer button:hover {
                    color: #007bff; /* Change color on hover */
                }

        .note-actions {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .edit-save-btn, .delete-btn {
            background: none;
            border: none;
            cursor: pointer;
            color: #555;
            font-size: 18px;
        }

        .delete-btn {
            color: #d9534f; /* Red color for delete */
        }
        /* Style for editable fields */
        .editable-input {
            background-color: #fcfae6; /* Light background color */
            border: none; /* Hide border */
            width: 100%; /* Full width to match the view mode */
            padding: 8px; /* Padding for better readability */
            box-sizing: border-box; /* Include padding in the width */
            font-size: 1.25em; /* Font size to match display */
            outline: none; /* Remove outline on focus */
            color: #333; /* Text color */
            border-radius: 4px; /* Optional: Add slight rounding to edges */
        }

            .editable-input.textarea {
                min-height: 200px; /* Adjust height for content textarea */
                resize: vertical; /* Allow resizing vertically if needed */
            }
    </style>
</head>

<body>
    @await Html.PartialAsync("_Sidebar")
    <div class="main-content">

        <div class="task-list">
            <div class="task-list-header">
                <h2>Note List</h2>
                <a href="@Url.Action("Create", "Note")" class="btn-primary">Add Note</a>
            </div>
            @if (Model != null && Model.Count > 0)
            {
                @foreach (var note in Model)
                {
                    <div class="note" id="note-@note.NoteId">
                        <!-- Editable Title -->
                        <input type="text" id="title-input-@note.NoteId" class="editable-input" style="display:none;" value="@note.Title" />
                        <h3 id="title-view-@note.NoteId">@note.Title</h3>

                        <!-- Editable Content -->
                        <textarea id="content-@note.NoteId" class="editable-input textarea" style="display:none;">@note.Content</textarea>
                        <div id="content-view-@note.NoteId" class="note-content">
                            @Html.Raw(note.Content.Replace("\n", "<br/>"))
                        </div>

                        <hr />
                        <div class="note-footer">
                            <p id="updated-at-@note.NoteId">@note.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            <div class="note-actions">
                                <button id="edit-save-btn-@note.NoteId" onclick="editSaveNote(@note.NoteId)" class="edit-save-btn">
                                    <i id="edit-icon-@note.NoteId" class="fas fa-pencil-alt"></i> <!-- Pencil icon -->
                                    <i id="save-icon-@note.NoteId" class="fas fa-check" style="display:none;"></i> <!-- Check icon (hidden initially) -->
                                </button>

                                <button id="delete-btn-@note.NoteId" onclick="deleteNoteConfirm(@note.NoteId)" class="delete-btn">
                                    <i class="fas fa-trash"></i> <!-- Trash icon -->
                                </button>
                            </div>
                        </div>

                        <hr />
                    </div>
                }
            }


        </div>
    </div>

    <script>
        // Function to handle edit and save in one button
        function editSaveNote(noteId) {
            // Get elements for title and content views, inputs, icons, and button
            const titleView = document.getElementById('title-view-' + noteId);
            const titleInput = document.getElementById('title-input-' + noteId);
            const contentView = document.getElementById('content-view-' + noteId);
            const contentInput = document.getElementById('content-' + noteId);

            const editIcon = document.getElementById('edit-icon-' + noteId);
            const saveIcon = document.getElementById('save-icon-' + noteId);

            // Check if currently in edit mode by checking the display of the edit icon
            const isEditMode = editIcon.style.display === 'none';

            if (!isEditMode) {
                // Switch to edit mode
                titleView.style.display = 'none';
                titleInput.style.display = 'block';
                contentView.style.display = 'none';
                contentInput.style.display = 'block';

                // Toggle icons
                editIcon.style.display = 'none';
                saveIcon.style.display = 'inline-block';
            } else {
                // Get updated values from inputs
                const updatedTitle = titleInput.value;
                const updatedContent = contentInput.value;

                // Create note data object for the API call
                const noteData = {
                    NoteId: noteId,
                    Title: updatedTitle,
                    Content: updatedContent
                };

                // Call the API to save the updated note
                fetch('http://localhost:5000/api/Note/' + noteId, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(noteData)
                })
                    .then(response => {
                        if (response.ok) {
                            // Switch back to view mode and update displayed content
                            titleView.style.display = 'block';
                            titleInput.style.display = 'none';
                            contentView.style.display = 'block';
                            contentInput.style.display = 'none';

                            // Update view with the new title and content
                            titleView.innerText = updatedTitle;
                            contentView.innerHTML = updatedContent.replace(/\n/g, '<br/>');

                            // Toggle icons back
                            editIcon.style.display = 'inline-block';
                            saveIcon.style.display = 'none';
                        } else {
                            alert('Error saving the note.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('There was an error updating the note.');
                    });
            }
        }
    </script>

    <script>
        // Function to confirm and delete a note
        function deleteNoteConfirm(noteId) {
            // Ask for confirmation
            if (confirm("Are you sure you want to delete this note?")) {
                // Call the delete function
                deleteNote(noteId);
            }
        }

        <script>
            // Function to confirm and set a note to Inactive
            function deleteNoteConfirm(noteId) {
                // Ask for confirmation
                if (confirm("Are you sure you want to mark this note as inactive?")) {
                // Call the function to update status
                setNoteStatusInactive(noteId);
                }
            }

            // Function to set the note status to Inactive
            function setNoteStatusInactive(noteId) {
                // Define the API URL
                const apiUrl = 'http://localhost:5000/api/Note/' + noteId;

            // Create the data object with the updated status
            const noteData = {
                Status: "Inactive"
                };

            // Send a PUT request to update the note's status
            fetch(apiUrl, {
                method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
                    },
            body: JSON.stringify(noteData)
                })
                .then(response => {
                    if (response.ok) {
                // Optionally, remove the note element from the DOM or visually indicate it is inactive
                document.getElementById('note-' + noteId).remove();
            alert('Note marked as inactive successfully.');
                    } else {
                alert('Error marking the note as inactive.');
                    }
                })
                .catch(error => {
                console.error('Error:', error);
            alert('There was an error updating the note status.');
                });
            }
    </script>

    </script>





</body>

</html>
